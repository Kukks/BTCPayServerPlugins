@using NBitcoin
@using BTCPayServer.Components.TruncateCenter
@using BTCPayServer.Payments
@using BTCPayServer.Services
@model BTCPayServer.Plugins.Wabisabi.BTCPayWallet.CoinjoinData.CoinjoinDataCoin
@inject TransactionLinkProviders TransactionLinkProviders
@{
    var op = OutPoint.Parse(Model.Outpoint);
    var text = Model.Outpoint;
    var pmi = PaymentTypes.CHAIN.GetPaymentMethodId("BTC");
}
<li class="bg-none list-group-item d-flex border-0 d-flex px-1  ">
    <div class="truncate-center-id border-0 p-0 d-flex ">
        <vc:truncate-center text="@text" link="@TransactionLinkProviders.GetTransactionLink(pmi, op.Hash.ToString())" classes="truncate-center-id h-100 border-end-0"/>
        <div class="card truncate-center-id " style="border-left-style: dashed; min-width: 110px;">
            <span class="text-nowrap">@Model.Amount BTC</span>
            <span class="text-nowrap">
                @if (string.IsNullOrEmpty(Model.PayoutId))
                {
                    @($"{Model.AnonymitySet.ToString("0.##")} anonset")
                }
                else
                {
                    @($"Payment ({Model.PayoutId})")
                }
            </span>
        </div>
    </div>


</li>