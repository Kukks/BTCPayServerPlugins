@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Abstractions.Models
@using BTCPayServer.Client.Models
@using BTCPayServer.HostedServices
@using BTCPayServer.Payments
@using BTCPayServer.PayoutProcessors
@using BTCPayServer.Payouts
@using BTCPayServer.Plugins.Prism.ViewModel
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Routing
@using Microsoft.Extensions.Logging
@using NBitcoin
@inject IScopeProvider ScopeProvider
@inject IPluginHookService PluginHookService
@inject LightningAddressService LightningAddressService
@inject PayoutProcessorService PayoutProcessorService
@inject IEnumerable<IPayoutProcessorFactory> PayoutProcessorFactories
@inject SatBreaker SatBreaker
@inject LinkGenerator LinkGenerator
@inject PullPaymentHostedService PullPaymentHostedService
@inject IHttpContextAccessor HttpContextAccessor



@if (!Loading)
{
    <EditForm EditContext="EditContext" OnValidSubmit="Save">

        <div class="sticky-header-setup"></div>
        <div class="sticky-header d-sm-flex align-items-center justify-content-between">
            <h2 class="mb-0">Automated Store Transfers</h2>
            <div class="d-flex gap-3 mt-3 mt-sm-0">

                @if (!NoPayoutProcessors)
                {
                    <div class="dropdown">
                        <button id="StatusOptionsToggle" class="btn btn-secondary dropdown-toggle dropdown-toggle-custom-caret" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <span>Options</span>
                        </button>
                        <ul class="dropdown-menu" aria-labelledby="StatusOptionsToggle">
                            <li>
                                <a class="dropdown-item" href="/stores/@StoreId/plugins/prism/auto-transfer?mode=send">Send Now</a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="/stores/@StoreId/plugins/prism/auto-transfer?mode=pos">Configure POS products</a>
                            </li>
                        </ul>
                    </div>
                }
                <button type="button" class="btn btn-primary  mx-2" id="add-prism" @onclick="Save">Save Settings</button>
            </div>
        </div>

        @if (NoPayoutProcessors)
        {
            <div class="alert alert-warning mb-5" role="alert">
                An automated payout processor is required in order to automate prism payouts.
                <a class="alert-link p-0" href="@PayoutProcessorLink">Configure now</a>
            </div>
        }

        @if (StatusMessageModel != null)
        {
            <div class="alert alert-@StatusMessageModel.ToString(StatusMessageModel.Severity)">
                @StatusMessageModel.Message
            </div>
        }

        <DataAnnotationsValidator />

        <div class="p-2 m-1 split-block">
            <div class="col-sm-10 col-md-9 col-xl-7 col-xxl-6">
                <div class="form-group">
                    <label class="form-label">Minimum wallet balance required (sats)</label>
                    <InputNumber class="form-control" @bind-Value="Settings.MinimumBalanceThreshold" />
                    <ValidationMessage For="() => Settings.MinimumBalanceThreshold" />
                    <span class="text-muted">Payout will only be processed for wallet balance greater than 546 sats</span>
                </div>

                <div class="form-group d-flex align-items-center">
                    <InputCheckbox class="btcpay-toggle me-2" @bind-Value="Settings.EnableScheduledAutomation" disabled="@NoPayoutProcessors" />
                    <label class="form-check-label mb-0">Enable Scheduled Transfers</label>
                </div>

                <div class="form-group">
                    <label class="form-label">Transfer days (1-31)</label>
                    <div class="input-group mb-3">
                        <input type="number" class="form-control" placeholder="Enter date (1-31)"
                               min="1" max="31" @bind="newDay" @bind:event="oninput"
                               @onkeypress="OnDayKeyPress" />
                        <button type="button" class="btn btn-secondary" @onclick="AddDay">Add</button>
                    </div>

                    <div class="d-flex flex-wrap align-items-center gap-2 mb-2">
                        @foreach (var day in selectedDays)
                        {
                            <span class="badge bg-secondary me-1 mb-1 cursor-pointer" @onclick="() => RemoveDay(day)">@day</span>
                        }
                    </div>
                    <ValidationMessage For="() => Settings.Schedule" />
                    <div class="text-danger">@dayError</div>
                </div>
            </div>
        </div>
    </EditForm>

    <h5>Transfer History</h5>
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
                <tr>
                    <th>Payout ID</th>
                    <th>Destination Store</th>
                    <th>Reserve Fee</th>
                    <th>Amount (Sats)</th>
                </tr>
            </thead>
            @* <tbody>
                @if (vm?.PendingPayouts?.Any() == true)
                {
                    @foreach (var kv in vm.PendingPayouts)
                    {
                        <tr>
                            <td>@kv.Key</td>
                            <td>@kv.Value.StoreName</td>
                            <td>@kv.Value.FeeCharged</td>
                            <td>@kv.Value.PayoutAmount</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="4" class="text-center text-muted py-4">
                            No pending payouts found
                        </td>
                    </tr>
                }
            </tbody> *@
        </table>
    </div>
}



@code {

    [Parameter] public string StoreId { get; set; }

    public ValidationMessageStore MessageStore { get; set; }

    public EditContext? EditContext { get; set; }

    public StatusMessageModel StatusMessageModel { get; set; }

    public PrismSettings Settings { get; set; }

    public string PayoutProcessorLink { get; set; }

    public bool Loading { get; set; } = true;
    public PayoutMethodId pmi { get; set; } = PayoutTypes.LN.GetPayoutMethodId("BTC");
    public PayoutMethodId pmichain { get; set; } = PayoutTypes.CHAIN.GetPayoutMethodId("BTC");
    public bool NoPayoutProcessors { get; set; }

    string newDay = "";
    string dayError = "";
    List<int> selectedDays = new();


    private string PrismEditButtonsFilter { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            PayoutProcessorLink = LinkGenerator.GetUriByAction(HttpContextAccessor.HttpContext, "ConfigureStorePayoutProcessors", "UIPayoutProcessors", new { StoreId });

            var fetchSettings = SatBreaker.Get(StoreId);
            var fetchProcessors = PayoutProcessorService.GetProcessors(new PayoutProcessorService.PayoutProcessorQuery()
            {
                Stores = new[] { StoreId },
                PayoutMethods = new[] { pmi, pmichain }
            });
            var tasks = new Task[]
            {
                fetchSettings,
                fetchProcessors
            };
            await Task.WhenAll(tasks);
            Settings = await fetchSettings;

            EditContext = new EditContext(Settings);
            MessageStore = new ValidationMessageStore(EditContext);
            EditContext.OnFieldChanged += FieldChanged;
            SatBreaker.PrismUpdated += SatBreakerOnPrismUpdated;

            NoPayoutProcessors = PayoutProcessorFactories.Any(factory => factory.GetSupportedPayoutMethods().Contains(pmi)) && (await fetchProcessors).All(data =>
                !new[] { pmi, pmichain }.Contains(data.GetPayoutMethodId()));

            ParseDays();
            Loading = false;
            await InvokeAsync(StateHasChanged);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    void ParseDays()
    {
        selectedDays = (Settings.Schedule ?? "")
            .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Where(s => int.TryParse(s, out var d) && d is >= 1 and <= 31)
            .Select(int.Parse).Distinct().OrderBy(x => x).ToList();
    }

    async Task OnDayKeyPress(KeyboardEventArgs e) { if (e.Key == "Enter") { AddDay(); await Task.CompletedTask; } }

    void AddDay()
    {
        dayError = "";
        if (!int.TryParse(newDay, out var day) || day is < 1 or > 31)
        {
            dayError = "Please enter a valid date between 1 and 31";
            return;
        }
        if (selectedDays.Contains(day))
        {
            dayError = "This date is already added";
            return;
        }
        selectedDays.Add(day);
        selectedDays = selectedDays.OrderBy(x => x).ToList();
        Settings.Schedule = string.Join(",", selectedDays);
        newDay = "";
    }

    void RemoveDay(int day)
    {
        selectedDays.Remove(day);
        Settings.Schedule = string.Join(",", selectedDays);
    }

    private void FieldChanged(object sender, FieldChangedEventArgs e)
    {
        StatusMessageModel = null;
    }

    private void SatBreakerOnPrismUpdated(object sender, PrismPaymentDetectedEventArgs e)
    {
        if (e.StoreId != StoreId) return;
        if (e.Settings != Settings && e.Settings.Version != Settings.Version)
        {
            Settings.Version = e.Settings.Version;
        }
        InvokeAsync(StateHasChanged);
    }

    private async Task CreateNewPrism()
    {
        Settings.Splits.Add(new Split());
        await InvokeAsync(StateHasChanged);
    }

    private async Task RemovePrism(Split item)
    {
        if (Settings.Splits.Remove(item))
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        if (EditContext is not null)
        {
            EditContext.OnFieldChanged -= FieldChanged;
        }
        SatBreaker.PrismUpdated -= SatBreakerOnPrismUpdated;
    }

    async Task Save()
    {
        var settz = await SatBreaker.Get(StoreId);
        settz.MinimumBalanceThreshold = Math.Max(Settings.MinimumBalanceThreshold, 546);
        settz.EnableScheduledAutomation = Settings.EnableScheduledAutomation;
        settz.Schedule = Settings.Schedule;
        Settings = settz;
        await UpdateAndShowResult(settz);
    }

    private async Task UpdateAndShowResult(PrismSettings settz)
    {
        var ok = await SatBreaker.UpdatePrismSettingsForStore(StoreId, settz);
        StatusMessageModel = new()
        {
            Severity = ok ? StatusMessageModel.StatusSeverity.Success : StatusMessageModel.StatusSeverity.Error,
            Message = ok ? "Settings saved successfully" : "Settings were changed by another process. Refresh and try again."
        };
    }

}