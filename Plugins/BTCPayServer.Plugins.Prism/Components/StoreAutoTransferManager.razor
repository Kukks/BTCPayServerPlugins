@using BTCPayServer.Abstractions.Models
@using BTCPayServer.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.EntityFrameworkCore
@using NBitcoin
@using NBitcoin.DataEncoders
@using static BTCPayServer.Plugins.Prism.SatBreaker
@inject SatBreaker SatBreaker
@inject NavigationManager Nav
@inject EventAggregator EventAggregator
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

@if (!Loading)
{
    <EditForm EditContext="EditContext" OnValidSubmit="Save">
        <div class="sticky-header-setup"></div>
        <div class="sticky-header d-sm-flex align-items-center justify-content-between">
            <h2 class="mb-0">Store Transfer</h2>
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-secondary" @onclick="GoBack">Go Back</button>
                <button type="submit" class="btn btn-primary mx-2">Save Transfers</button>
            </div>
        </div>

        @if (StatusMessageModel != null)
        {
            <div class="alert alert-@StatusMessageModel.ToString(StatusMessageModel.Severity)">
                @StatusMessageModel.Message
            </div>
        }

        <ValidationSummary class="alert alert-danger" />

        <div class="p-2 m-1 split-block">
            <div class="col-sm-10 col-md-9 col-xl-7 col-xxl-6">

                <div class="form-group">
                    <label class="form-label">Transfer Title</label>
                    <input class="form-control" @bind="scheduleTitle" />
                </div>
                <div class="form-group">
                    <label class="form-label">Payment Method</label>
                    <select class="form-select form-select-sm" @bind="PaymentId" @bind:event="oninput">
                        <option value="BTC-CHAIN">On-chain</option>
                        <option value="BTC-LN">Lightning</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Amount to transfer from wallet (sats)</label>
                    <input class="form-control" @bind="TotalAmount" />
                    <span class="text-muted">Leave blank if you want to transfer all your wallet balance</span>
                </div>
                <div class="form-group">
                    <label class="form-label">Schedule Transfer days (1-31)</label>
                    <div class="input-group mb-3">
                        <input type="number" class="form-control" placeholder="Enter date (1-31)"
                               min="1" max="31" @bind="newDay" @bind:event="oninput"
                               @onkeypress="OnDayKeyPress" />
                        <button type="button" class="btn btn-secondary" @onclick="AddDay">Add</button>
                    </div>
                    <div class="d-flex flex-wrap gap-2 mb-2">
                        @foreach (var day in selectedDays)
                        {
                            <span class="badge bg-secondary cursor-pointer" @onclick="() => RemoveDay(day)">@day</span>
                        }
                    </div>
                    <ValidationMessage For="() => Settings.Schedule" />
                    <div class="text-danger">@dayError</div>
                </div>

                <div class="table-responsive">
                    <table class="table align-middle">
                        <thead>
                            <tr>
                                <th>Destination Store</th>
                                <th>Percentage split (%)</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var d in StoreTransfer.Destinations)
                            {
                                <tr>
                                    <td>
                                        <select class="form-select" @bind="d.Destination" @bind:event="oninput">
                                            <option value="">-- Select store --</option>
                                            @foreach (var s in AvailableStores)
                                            {
                                                <option value="@s.Value">@s.Text</option>
                                            }
                                        </select>
                                    </td>
                                    <td>
                                        <input type="number" min="1" max="100" step="1" class="form-control" placeholder="%" @bind="d.Percentage" @bind:event="oninput" />
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveDest(d)">Remove</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <button type="button" class="btn btn-link" @onclick="AddDest">+ Add destination</button>
                </div>
            </div>
        </div>
    </EditForm>
}


@code {

    [Parameter] public string StoreId { get; set; }

    public ValidationMessageStore MessageStore { get; set; }

    public EditContext? EditContext { get; set; }

    public StatusMessageModel StatusMessageModel { get; set; }

    public PrismSettings Settings { get; set; }

    public bool Loading { get; set; } = true;

    List<SelectListItem> AvailableStores = new();

    Split StoreTransfer = new();
    string PaymentId = "BTC-CHAIN";
    string TotalAmount = "";

    List<int> selectedDays = new();
    string newDay = "";
    string dayError = "";
    string scheduleTitle = "";


    void GoBack()
    {
        Nav.NavigateTo($"/stores/{StoreId}/plugins/prism/auto-transfer", forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            List<Data.StoreData> UserStores = new();
            if (user.Identity?.IsAuthenticated ?? false)
            {
                var userId = UserManager.GetUserId(user);
                var appUser = await UserManager.Users.Where(c => c.Id == userId).Include(u => u.UserStores).ThenInclude(us => us.StoreData).SingleOrDefaultAsync();
                UserStores = appUser?.UserStores.Where(s => s.StoreDataId != StoreId && !s.StoreData.Archived).Select(s => s.StoreData).ToList() ?? new();
            }
            AvailableStores = UserStores.Select(s => new SelectListItem
            {
                Value = s.Id,
                Text = s.StoreName
            }).ToList() ?? new List<SelectListItem>();

            Settings = await SatBreaker.Get(StoreId);
            selectedDays = Settings.Schedule?.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).Where(s => int.TryParse(s, out _)).Select(int.Parse).ToList() ?? new List<int>();
            EditContext = new EditContext(Settings);
            MessageStore = new ValidationMessageStore(EditContext);
            EditContext.OnFieldChanged += FieldChanged;
            SatBreaker.PrismUpdated += SatBreakerOnPrismUpdated;
            Loading = false;
            await InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    void AddDest() => StoreTransfer.Destinations.Add(new BTCPayServer.Plugins.Prism.PrismSplit());

    void RemoveDest(BTCPayServer.Plugins.Prism.PrismSplit d) => StoreTransfer.Destinations.Remove(d);

    void ParseDays()
    {
        selectedDays = (Settings.Schedule ?? "")
            .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
            .Where(s => int.TryParse(s, out var d) && d is >= 1 and <= 31)
            .Select(int.Parse).Distinct().OrderBy(x => x).ToList();
    }

    void AddDay()
    {
        dayError = "";
        if (!int.TryParse(newDay, out var day) || day is < 1 or > 31) { dayError = "Please enter a valid date between 1 and 31"; return; }

        if (selectedDays.Contains(day)) { dayError = "Day already added"; return; }
        selectedDays.Add(day);
        selectedDays = selectedDays.OrderBy(x => x).ToList();
        Settings.Schedule = string.Join(",", selectedDays);
        newDay = "";
    }

    async Task OnDayKeyPress(KeyboardEventArgs e) { if (e.Key == "Enter") { AddDay(); await Task.CompletedTask; } }

    void RemoveDay(int day)
    {
        selectedDays.Remove(day);
        Settings.Schedule = string.Join(",", selectedDays);
    }

    private void SatBreakerOnPrismUpdated(object sender, PrismPaymentDetectedEventArgs e)
    {
        if (e.StoreId != StoreId) return;
        if (e.Settings != Settings && e.Settings.Version != Settings.Version)
        {
            Settings.Version = e.Settings.Version;
        }
        InvokeAsync(StateHasChanged);
    }

    private void FieldChanged(object sender, FieldChangedEventArgs e)
    {
        StatusMessageModel = null;
    }

    public void Dispose()
    {
        if (EditContext is not null)
        {
            EditContext.OnFieldChanged -= FieldChanged;
        }
        SatBreaker.PrismUpdated -= SatBreakerOnPrismUpdated;
    }


    async Task Save()
    {
        var settz = await SatBreaker.Get(StoreId);

        var validDestinations = StoreTransfer.Destinations.Where(d => d.Percentage is > 0 && !string.IsNullOrEmpty(d.Destination))
            .Select(d => new BTCPayServer.Plugins.Prism.PrismSplit
            {
                Destination = $"store-prism:{d.Destination}:{PaymentId}",
                Percentage = Math.Min(100, d.Percentage)
            }).ToList();
        if (!validDestinations.Any())
        {
            DisplayErrorResult("Please include destination store and specify percentage");
            return;
        }
        if (validDestinations.Sum(d => d.Percentage) > 100)
        {
            DisplayErrorResult("Sum of all percentage split cannot be greater than 100");
            return;
        }

        var id = !string.IsNullOrEmpty(scheduleTitle) ? scheduleTitle : Encoders.Base58.EncodeData(RandomUtils.GetBytes(20));
        string source = $"storetransfer-{id}:{PaymentId}:{TotalAmount}";
        settz.Splits.Add(new Split
        {
            Source = source,
            Schedule = selectedDays.Any() ? string.Join(",", selectedDays) : string.Empty,
            Destinations = validDestinations
        });
        var savedRecord = await SatBreaker.UpdatePrismSettingsForStore(StoreId, settz);
        ShowResult(savedRecord);
        if (savedRecord && !selectedDays.Any())
        {
            EventAggregator.Publish(new ScheduleDayEvent(forceSplitSource: source));
        }
        RevertToDefault();
    }

    private void ShowResult(bool success)
    {
        StatusMessageModel = new()
        {
            Severity = success ? StatusMessageModel.StatusSeverity.Success : StatusMessageModel.StatusSeverity.Error,
            Message = success ? "Store transfer recorded successfully" : "Settings were changed by another process. Refresh and try again."
        };
    }

    private void DisplayErrorResult(string message)
    {
        StatusMessageModel = new()
        {
            Severity = StatusMessageModel.StatusSeverity.Error,
            Message = message
        };
    }

    private void RevertToDefault()
    {
        selectedDays = new();
        scheduleTitle = "";
		TotalAmount = "";
    }
}