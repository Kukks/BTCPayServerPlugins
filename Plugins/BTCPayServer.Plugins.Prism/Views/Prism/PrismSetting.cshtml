@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Components.UIExtensionPoint
@using BTCPayServer.PayoutProcessors
@using BTCPayServer.Payouts
@using BTCPayServer.Plugins.Prism
@using BTCPayServer.Plugins.Prism.Components
@using BTCPayServer.Abstractions.Contracts
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Routing
@inject LinkGenerator LinkGenerator
@inject PayoutProcessorService PayoutProcessorService
@inject IHttpContextAccessor HttpContextAccessor
@inject IEnumerable<IPayoutProcessorFactory> PayoutProcessorFactories
@inject IScopeProvider ScopeProvider
@model PrismSettings
@{
    ViewData.SetActivePage(PrismPluginNavPages.PrismConfig, "Prism");
    var storeId = ScopeProvider.GetCurrentStoreId();
    PayoutMethodId pmi = PayoutTypes.LN.GetPayoutMethodId("BTC");
    PayoutMethodId pmichain = PayoutTypes.CHAIN.GetPayoutMethodId("BTC");
    string PayoutProcessorLink = LinkGenerator.GetUriByAction(HttpContextAccessor.HttpContext, "ConfigureStorePayoutProcessors", "UIPayoutProcessors", new { StoreId = storeId });
    var fetchProcessors = PayoutProcessorService.GetProcessors(new PayoutProcessorService.PayoutProcessorQuery()
    {
        Stores = new[] { storeId },
        PayoutMethods = new[] { pmi, pmichain }
    });
    var NoPayoutProcessors = PayoutProcessorFactories.Any(factory => factory.GetSupportedPayoutMethods().Contains(pmi)) && (await fetchProcessors).All(data =>
                !new[] { pmi, pmichain }.Contains(data.GetPayoutMethodId()));
}

<div class="sticky-header">
    <h2>
        <span>@ViewData["Title"]</span>
        <a href="#descriptor" data-bs-toggle="collapse">
            <vc:icon symbol="info" />
        </a>
    </h2>
    <div class="d-flex gap-3 mt-3 mt-sm-0">
        <a asp-controller="Prism" asp-action="ListPrismDestination" asp-route-storeId="@storeId" class="btn btn-secondary" role="button">Configure Destination</a>
        <button type="submit" form="event-form" class="btn btn-success">Save</button>
    </div>
</div>

<div id="descriptor" class="collapse">
    <div class="d-flex px-4 py-4 mb-4 bg-tile rounded">
        <div class="flex-fill">
            <p class="mb-2">The prism plugin allows automated value splits for your lightning and onchain payments. </p>
            <p class="mb-2">You can set up multiple prisms, each with their own source (which is a <strong>lightning address username</strong>, or use *, *Onchain or *All as catch-all for all payments made against invoices, excluding ones which Prism can handle explicitly) and destinations (which are other lightning addresses,, lnurls, bitcoin addresses, an xpub, or a custom formaty provided by other plugins).</p>
            <p class="mb-2">The plugin will automatically credit the configured percentage of the payment to the destination (while also making sure there is 2% reserved to cater for fees, don't worry, once the lightning node tells us the exact fee amount, we credit/debit the balance after the payment), and once the configured threshold is reached, a <strong>payout</strong> will be created. </p>
            <p class="mb-2">Then, a <strong>payout processor</strong> will run at intervals and process the payout. </p>
            <a href="https://dergigi.com/2023/03/12/lightning-prisms/" target="_blank" rel="noreferrer noopener">Read more about the plugin</a>
        </div>
        <button type="button" class="btn-close ms-auto" data-bs-toggle="collapse" data-bs-target="#descriptor" aria-expanded="false">
            <vc:icon symbol="close" />
        </button>
    </div>
</div>

@if (NoPayoutProcessors)
{
    <div class="alert alert-warning mb-5" role="alert">
        An automated payout processor is required in order to automate prism payouts. <a class="alert-link p-0" href="@PayoutProcessorLink">Configure now</a>
    </div>
}

<partial name="_StatusMessage" />

<form id="event-form" asp-controller="Prism" asp-action="PrismSettingPost" asp-route-storeId="@storeId" method="post">
    <div class="row">
        <div class="col-sm-10 col-md-9 col-xl-7 col-xxl-6">
            <div class="form-group d-flex align-items-center">
                <input type="checkbox" class="btcpay-toggle me-2" id="featureToggle" asp-for="Enabled" disabled="@NoPayoutProcessors" />
                <label asp-for="Enabled" class="form-check-label mb-0">Enabled</label>
            </div>

            <div class="form-group">
                <label asp-for="SatThreshold" class="form-label">Sats Threshold</label>
                <input asp-for="SatThreshold" class="form-control" />
                <span asp-validation-for="SatThreshold" class="text-danger"></span>
                <span class="text-muted">How many sats do you want to accumulate per destination before sending?</span>
            </div>

            <div class="form-group">
                <label asp-for="Reserve" class="form-label">Reserve</label>
                <input asp-for="Reserve" class="form-control" />
                <span asp-validation-for="Reserve" class="text-danger"></span>
                <span class="text-muted">When a payout is being generated, how many of its amount in percentage should be excluded to cover the fee? Once the payment is settled, if the lightning node provides the exact fee, the balance is adjusted accordingly.</span>
            </div>
        </div>
    </div>


    <h5>Your Prisms</h5>
    <div id="splits-container">
        @for (int i = 0; i < Model.Splits.Count; i++)
        {
            <partial name="_Split"
                     model="Model.Splits[i]"
                     view-data='new ViewDataDictionary(ViewData) { ["Index"] = i, ["Destinations"] = Model.Destinations }' />
        }
    </div>

    <div id="split-template" class="d-none">
        <partial name="_Split"
                 model="new BTCPayServer.Plugins.Prism.Split()"
                 view-data='new ViewDataDictionary(ViewData) { ["Index"] = -1, ["Destinations"] = Model.Destinations }' />
    </div>

    <button type="button" id="add-split" class="btn btn-outline-primary mt-3">+ Add Prism</button>
</form>


@section PageFootContent {
    <script>
        document.addEventListener("click", function (e) {
            if (e.target.classList.contains("remove-prism")) {
                e.target.closest(".split-block").remove();
            }
            if (e.target.classList.contains("remove-dest")) {
                e.target.closest("tr").remove();
            }
            if (e.target.classList.contains("add-dest")) {
                let tbody = e.target.closest("table").querySelector("tbody");
                let index = tbody.querySelectorAll("tr").length;
                let splitIndex = e.target.closest(".split-block").dataset.index;

                const configuredDestinations = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
                    Model.Destinations.ToDictionary(d => d.Key, d => d.Value.Destination)
                ))
                tbody.insertAdjacentHTML("beforeend", `
                    <tr>
                        <td><select name="Splits[${splitIndex}].Destinations[${index}].Destination" class="form-select dest"><option value="">-- Select destination --</option>${Object.entries(configuredDestinations).map(([name,address])=>`<option value="${address}">${name}</option>`).join('')}</select></td>
                        <td><div class="d-flex align-items-center"><input type="range" name="Splits[${splitIndex}].Destinations[${index}].Percentage" class="form-range flex-grow-1 me-2 percentage-slider" step="0.01" min="0" max="100" value="0" /><input type="number" step="0.01" min="0" max="100" value="0" class="form-control form-control-sm percentage-input" style="width:90px; text-align:center; vertical-align:middle;" /><span>%</span></div></td>
                        <td><button type="button" class="btn btn-outline-danger btn-sm remove-dest">Remove</button></td>
                    </tr>
                `);
            }
        });

        document.addEventListener("input", function (e) {
            if (e.target.classList.contains("percentage-slider")) {
                const input = e.target.closest("td").querySelector(".percentage-input");
                if (input) {
                    input.value = e.target.value;
                }
            }

            if (e.target.classList.contains("percentage-input")) {
                const slider = e.target.closest("td").querySelector(".percentage-slider");
                if (slider) {
                    slider.value = e.target.value;
                }
            }
        });

        document.getElementById("add-split").addEventListener("click", function () {
            let container = document.getElementById("splits-container");
            let newIndex = container.querySelectorAll(".split-block").length;

            let template = document.querySelector("#split-template .split-block").cloneNode(true);
            template.innerHTML = template.innerHTML.replace(/\Splits\[-1\]/g, `Splits[${newIndex}]`);
            template.dataset.index = newIndex;
            container.appendChild(template);
        });
    </script>
}
